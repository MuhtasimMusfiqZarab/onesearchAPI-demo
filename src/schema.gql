# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddRequestInput {
  category: String
  datasize: String
  description: String
  location: String
  platform: String
  userId: String!
}

input AddReviewInput {
  id: String!
  rating: Float!
  reviewText: String
}

enum AuthProvider {
  Google
}

input BulkGoogleInput {
  category: String
  city: String
  claim_status: String
  company: String
  country: String
  gmaps_url: String
  latitude: String
  longitude: String
  phone: String
  postcode: String
  rating: String
  review_data: String
  state: String
  timestamp: DateTime
  total_reviews: String
  website: String
}

input BulkLinkedinInput {
  company: String
  firstName: String
  fullName: String
  lastName: String
  location: String
  title: String
  url: String!
}

input BulkYoutubeInput {
  bio_email: [String!]
  channel_name: String
  channel_url: String!
  description: String
  facebook: String
  instagram: String
  joined: String
  location: String
  others: String
  pinterest: String
  socialblade_category: String
  subscribers: Float
  tiktok: String
  timestamp: DateTime
  twitter: String
  views: String
}

type CategoriesType {
  categories: [String!]
  totalCount: Int
}

type ChannelsType {
  channels: [YoutubeBasicType!]
  totalCount: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetAllUserReviewsType {
  totalCount: Int!
  users: [UserReviewType!]!
}

type GetAllUsersType {
  totalCount: Int!
  users: [UserType!]!
}

input GetChannelsInput {
  limit: Float!
  location: String
  offset: Float!
  searchText: String
  socialblade_category: String
  subscribers: String
}

input GetGoogleInput {
  category: String
  country: String
  limit: Float!
  offset: Float!
  searchText: String
}

input GetLinkedinProfileInput {
  company: String
  limit: Float!
  location: String
  offset: Float!
  searchText: String
  title: String
}

input GetRequestInput {
  category: String
  limit: Float!
  location: String
  offset: Float!
  platform: String
  searchText: String
  status: String
}

input GetUserReviewInput {
  limit: Float!
  offset: Float!
}

input GetUsersInput {
  accessRole: String
  limit: Float!
  location: String
  offset: Float!
  searchText: String
}

type GoogleBasicType {
  category: String
  claim_status: String
  company: String
  country: String
  createdAt: DateTime!
  createdBy: String!
  id: ID!
  rating: String
  total_reviews: String
  updatedAt: DateTime!
  updatedBy: String!
}

type GoogleCategoriesType {
  categories: [String!]
  totalCount: Int
}

type GoogleCountriesType {
  countries: [String!]
  totalCount: Int
}

type GoogleProfilesType {
  profiles: [GoogleBasicType!]
  totalCount: Int
}

type LinkedinBasicType {
  company: String
  createdAt: DateTime!
  createdBy: String!
  firstName: String
  fullName: String
  id: ID!
  lastName: String
  location: String
  title: String
  updatedAt: DateTime!
  updatedBy: String!
  users: [UserType!]
}

type LinkedinCompaniesType {
  companies: [String!]
  totalCount: Int
}

type LinkedinLocationsType {
  locations: [String!]
  totalCount: Int
}

type LinkedinProfileType {
  profiles: [LinkedinBasicType!]
  totalCount: Int
}

type LinkedinTitleType {
  titles: [String!]
  totalCount: Int
}

type LocationsType {
  locations: [String!]
  totalCount: Int
}

type Mutation {
  addGoogleLeads(input: [BulkGoogleInput!]!): [GoogleBasicType!]!
  addLinkedinLeads(input: [BulkLinkedinInput!]!): [LinkedinBasicType!]!
  addRequest(input: [AddRequestInput!]!): RequestType!
  addUserReview(input: AddReviewInput!): UserType!
  addUserYoutube(input: AddReviewInput!): UserType!
  addYoutubeLeads(input: [BulkYoutubeInput!]!): [YoutubeType!]!
  createUser(input: RegistrationInput!): UserType!
  unlockLinkedinLead(input: UserLinkedinInput!): UserLinkedinType!
}

type PaymentType {
  amount: Float!
  createdAt: DateTime!
  createdBy: String!
  id: ID!
  updatedAt: DateTime!
  updatedBy: String!
}

type ProfileType {
  availableCredits: Float
  city: String
  country: String
  createdAt: DateTime!
  createdBy: String!
  id: ID!
  phoneNumber: String
  updatedAt: DateTime!
  updatedBy: String!
}

type Query {
  channel(id: String!): YoutubeBasicType
  currentUser: UserType!
  getAllCategories: CategoriesType
  getAllChannels(data: GetChannelsInput!): ChannelsType
  getAllGoogleProfiles(data: GetGoogleInput!): GoogleProfilesType
  getAllRequests(data: GetRequestInput!): RequestsType
  getAllRequestsOfUser(data: GetRequestInput!): RequestsType
  getAllUserReviews(data: GetUserReviewInput!): GetAllUserReviewsType!
  getAllUsers(data: GetUsersInput!): GetAllUsersType!
  getChannelCountries: LocationsType
  getGoogleCategories: GoogleCategoriesType
  getGoogleCountries: GoogleCountriesType
  getGoogleProfile(id: String!): GoogleBasicType
  getLinkedinCompanies: LinkedinCompaniesType
  getLinkedinLocations: LinkedinLocationsType
  getLinkedinProfile(id: String!): LinkedinBasicType
  getLinkedinProfiles(data: GetLinkedinProfileInput!): LinkedinProfileType
  getLinkedinTitles: LinkedinTitleType
  getRequest(id: String!): RequestType
  getRequestCategories: RequestCategoriesType
  getRequestCountries: RequestCountriesType
  getRequestPlatforms: RequestPlatformsType
  getRequestStatuses: RequestStatusType
}

input RegistrationInput {
  authProvider: AuthProvider
  avatarLink: String!
  email: String!
  firstName: String!
  lastName: String!
  token: String!
}

type RequestCategoriesType {
  categories: [String!]
  totalCount: Int
}

type RequestCountriesType {
  countries: [String!]
  totalCount: Int
}

type RequestPlatformsType {
  platforms: [String!]
  totalCount: Int
}

type RequestStatusType {
  statuses: [String!]
  totalCount: Int
}

type RequestsType {
  requests: [RequestType!]
  totalCount: Int
}

type RequestType {
  category: String
  createdAt: DateTime!
  createdBy: String!
  datasize: String
  description: String
  id: ID!
  location: String
  platform: String
  status: String
  updatedAt: DateTime!
  updatedBy: String!
  userId: String!
}

enum UserAccessRole {
  Admin
  Demo
  Pro
  Provider
}

input UserLinkedinInput {
  linkedinId: String
  userId: String!
}

type UserLinkedinType {
  linkedinId: String
  userId: String
}

type UserReviewType {
  createdAt: DateTime!
  createdBy: String!
  firstName: String
  id: ID!
  lastName: String
  rating: Float
  reviewText: String
  updatedAt: DateTime!
  updatedBy: String!
}

type UserType {
  accessRole: UserAccessRole!
  authProvider: AuthProvider
  availableCredits: Float
  avatarLink: String
  createdAt: DateTime!
  createdBy: String!
  email: String
  firstName: String
  id: ID!
  isActive: Boolean
  language: String
  lastName: String
  linkedin: [LinkedinBasicType!]
  payments: [PaymentType!]
  profile: ProfileType
  rating: Float
  requests: [RequestType!]
  reviewText: String
  token: String
  updatedAt: DateTime!
  updatedBy: String!
  youtube: [YoutubeType!]
}

type YoutubeBasicType {
  channel_name: String
  id: ID!
  joined: String
  location: String
  socialblade_category: String
  subscribers: Float
  updatedAt: DateTime
  views: String
}

type YoutubeType {
  bio_email: [String!]
  channel_name: String
  channel_url: String!
  createdAt: DateTime!
  createdBy: String!
  description: String
  facebook: String
  id: ID!
  instagram: String
  joined: String
  location: String
  others: String
  pinterest: String
  socialblade_category: String
  subscribers: Float
  tiktok: String
  timestamp: DateTime
  twitter: String
  updatedAt: DateTime!
  updatedBy: String!
  views: String
}
